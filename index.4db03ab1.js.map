{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar cells = document.querySelectorAll(\".field-cell\");\nvar scoreDisplay = document.querySelector(\".game-score\");\nvar startButton = document.querySelector(\".button.start\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar winMessage = document.querySelector(\".message-win\");\nvar startMessage = document.querySelector(\".message-start\");\nvar hasChanged = false;\nvar isGameOver = false;\nvar score = 0;\nvar gameBoard = [];\nfunction initializeGame() {\n    score = 0;\n    gameBoard = Array.from({\n        length: 4\n    }, function() {\n        return Array.from({\n            length: 4\n        }, function() {\n            return 0;\n        });\n    });\n    isGameOver = false;\n    loseMessage.classList.add(\"hidden\");\n    winMessage.classList.add(\"hidden\");\n    startMessage.classList.remove(\"hidden\");\n    scoreDisplay.textContent = score;\n}\nfunction animateMergedCells(mergedCells) {\n    mergedCells.forEach(function(cell) {\n        cell.style.transform = \"scale(1.1)\";\n        setTimeout(function() {\n            cell.style.transform = \"scale(1)\";\n        }, 500);\n    });\n}\nfunction addRandomTile() {\n    var emptyCells = [];\n    for(var row = 0; row < 4; row++){\n        for(var col = 0; col < 4; col++)if (gameBoard[row][col] === 0) emptyCells.push({\n            row: row,\n            col: col\n        });\n    }\n    if (emptyCells.length > 0) {\n        var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        var randomValue = Math.random() < 0.9 ? 2 : 4;\n        gameBoard[randomCell.row][randomCell.col] = randomValue;\n    }\n}\nfunction checkGameOver() {\n    for(var row = 0; row < gameBoard.length; row++)for(var col = 0; col < gameBoard[row].length; col++){\n        if (gameBoard[row][col] === 0) return false;\n    }\n    for(var row1 = 0; row1 < gameBoard.length; row1++)for(var col1 = 0; col1 < gameBoard[row1].length; col1++){\n        if (row1 < gameBoard.length - 1 && gameBoard[row1][col1] === gameBoard[row1 + 1][col1]) return false;\n        if (col1 < gameBoard[row1].length - 1 && gameBoard[row1][col1] === gameBoard[row1][col1 + 1]) return false;\n    }\n    if (isGameOver) return true;\n    showMessage(\"message-lose\");\n}\nfunction showMessage(className) {\n    var messageElement = document.querySelector(\".message.\".concat(className));\n    messageElement.classList.remove(\"hidden\");\n}\nfunction checkWin() {\n    for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n        if (gameBoard[row][col] === 2048) return true;\n    }\n    return false;\n}\nfunction moveLeft() {\n    hasChanged = false;\n    var mergedCells = [];\n    for(var row = 0; row < 4; row++){\n        for(var col = 1; col < 4; col++)if (gameBoard[row][col] !== 0) {\n            var newCol = col;\n            while(newCol > 0 && gameBoard[row][newCol - 1] === 0)newCol--;\n            if (newCol === 0 || gameBoard[row][newCol - 1] !== gameBoard[row][col]) {\n                if (newCol !== col) {\n                    gameBoard[row][newCol] = gameBoard[row][col];\n                    gameBoard[row][col] = 0;\n                    hasChanged = true;\n                }\n            } else if (gameBoard[row][newCol - 1] === gameBoard[row][col]) {\n                if (!mergedCells.includes(document.getElementById(\"cell-\".concat(row, \"-\").concat(newCol - 1)))) {\n                    gameBoard[row][newCol - 1] *= 2;\n                    gameBoard[row][col] = 0;\n                    score += gameBoard[row][newCol - 1];\n                    hasChanged = true;\n                    mergedCells.push(document.getElementById(\"cell-\".concat(row, \"-\").concat(newCol - 1)));\n                }\n            }\n        }\n    }\n    animateMergedCells(mergedCells);\n    mergedCells.length = 0;\n    return hasChanged;\n}\nfunction moveRight() {\n    hasChanged = false;\n    var mergedCells = [];\n    for(var row = 0; row < 4; row++){\n        for(var col = 2; col >= 0; col--)if (gameBoard[row][col] !== 0) {\n            var newCol = col;\n            while(newCol < 3 && gameBoard[row][newCol + 1] === 0)newCol++;\n            if (newCol < 3 && gameBoard[row][newCol + 1] === gameBoard[row][col]) {\n                gameBoard[row][newCol + 1] *= 2;\n                gameBoard[row][col] = 0;\n                score += gameBoard[row][newCol + 1];\n                hasChanged = true;\n                mergedCells.push(document.getElementById(\"cell-\".concat(row, \"-\").concat(newCol + 1)));\n            } else if (newCol !== col) {\n                gameBoard[row][newCol] = gameBoard[row][col];\n                gameBoard[row][col] = 0;\n                hasChanged = true;\n            }\n        }\n    }\n    animateMergedCells(mergedCells);\n    mergedCells.length = 0;\n    return hasChanged;\n}\nfunction moveUp() {\n    hasChanged = false;\n    var mergedCells = [];\n    for(var col = 0; col < 4; col++){\n        for(var row = 1; row < 4; row++)if (gameBoard[row][col] !== 0) {\n            var newRow = row;\n            while(newRow > 0 && gameBoard[newRow - 1][col] === 0)newRow--;\n            if (newRow > 0 && gameBoard[newRow - 1][col] === gameBoard[row][col]) {\n                gameBoard[newRow - 1][col] *= 2;\n                gameBoard[row][col] = 0;\n                score += gameBoard[newRow - 1][col];\n                hasChanged = true;\n                mergedCells.push(document.getElementById(\"cell-\".concat(newRow - 1, \"-\").concat(col)));\n            } else if (newRow !== row) {\n                gameBoard[newRow][col] = gameBoard[row][col];\n                gameBoard[row][col] = 0;\n                hasChanged = true;\n            }\n        }\n    }\n    animateMergedCells(mergedCells);\n    mergedCells.length = 0;\n    return hasChanged;\n}\nfunction moveDown() {\n    hasChanged = false;\n    var mergedCells = [];\n    for(var col = 0; col < 4; col++){\n        for(var row = 2; row >= 0; row--)if (gameBoard[row][col] !== 0) {\n            var newRow = row;\n            while(newRow < 3 && gameBoard[newRow + 1][col] === 0)newRow++;\n            if (newRow < 3 && gameBoard[newRow + 1][col] === gameBoard[row][col]) {\n                gameBoard[newRow + 1][col] *= 2;\n                gameBoard[row][col] = 0;\n                score += gameBoard[newRow + 1][col];\n                hasChanged = true;\n                mergedCells.push(document.getElementById(\"cell-\".concat(newRow + 1, \"-\").concat(col)));\n            } else if (newRow !== row) {\n                gameBoard[newRow][col] = gameBoard[row][col];\n                gameBoard[row][col] = 0;\n                hasChanged = true;\n            }\n        }\n    }\n    animateMergedCells(mergedCells);\n    mergedCells.length = 0;\n    return hasChanged;\n}\nfunction handleKeyDown(keyEvent) {\n    hasChanged = false;\n    var key = keyEvent.key;\n    switch(key){\n        case \"ArrowLeft\":\n            hasChanged = moveLeft();\n            break;\n        case \"ArrowRight\":\n            hasChanged = moveRight();\n            break;\n        case \"ArrowUp\":\n            hasChanged = moveUp();\n            break;\n        case \"ArrowDown\":\n            hasChanged = moveDown();\n            break;\n    }\n    if (hasChanged && !isGameOver) {\n        addRandomTile();\n        updateBoardView();\n        scoreDisplay.textContent = score;\n        if (checkGameOver()) {\n            isGameOver = true;\n            loseMessage.classList.remove(\"hidden\");\n            if (checkWin()) {\n                isGameOver = true;\n                winMessage.classList.remove(\"hidden\");\n            }\n        }\n    }\n}\nfunction updateBoardView() {\n    hasChanged = false;\n    for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n        var cell = cells[row * 4 + col];\n        var value = gameBoard[row][col];\n        if (value !== 0) {\n            cell.textContent = value;\n            cell.className = \"field-cell value-\".concat(value);\n        } else {\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n        }\n    }\n    if (checkGameOver()) {\n        isGameOver = true;\n        loseMessage.classList.remove(\"hidden\");\n    }\n}\nvar isFirstClick = true;\nfunction startGame() {\n    if (isFirstClick) {\n        document.getElementById(\"startButton\").textContent = \"Restart\";\n        startButton.classList.add(\"restart\");\n        isFirstClick = false;\n    }\n    initializeGame();\n    addRandomTile();\n    addRandomTile();\n    scoreDisplay.textContent = score;\n    startMessage.classList.add(\"hidden\");\n    document.addEventListener(\"keydown\", handleKeyDown);\n    updateBoardView();\n}\nstartButton.addEventListener(\"click\", startGame);\n\n//# sourceMappingURL=index.4db03ab1.js.map\n","'use strict';\n\nconst cells = document.querySelectorAll('.field-cell');\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nlet hasChanged = false;\n\nlet isGameOver = false;\nlet score = 0;\nlet gameBoard = [];\n\nfunction initializeGame() {\n  score = 0;\n\n  gameBoard = Array.from({\n    length: 4,\n  }, () =>\n    Array.from({\n      length: 4,\n    }, () => 0));\n  isGameOver = false;\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  startMessage.classList.remove('hidden');\n  scoreDisplay.textContent = score;\n}\n\nfunction animateMergedCells(mergedCells) {\n  mergedCells.forEach(cell => {\n    cell.style.transform = 'scale(1.1)';\n\n    setTimeout(() => {\n      cell.style.transform = 'scale(1)';\n    }, 500);\n  });\n}\n\nfunction addRandomTile() {\n  const emptyCells = [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (gameBoard[row][col] === 0) {\n        emptyCells.push({\n          row,\n          col,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomCell\n    = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const randomValue = Math.random() < 0.9\n      ? 2\n      : 4;\n\n    gameBoard[randomCell.row][randomCell.col] = randomValue;\n  }\n}\n\nfunction checkGameOver() {\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let col = 0; col < gameBoard[row].length; col++) {\n      if (gameBoard[row][col] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let col = 0; col < gameBoard[row].length; col++) {\n      if (row < gameBoard.length - 1 && gameBoard[row][col]\n        === gameBoard[row + 1][col]) {\n        return false;\n      }\n\n      if (col < gameBoard[row].length - 1 && gameBoard[row][col]\n          === gameBoard[row][col + 1]) {\n        return false;\n      }\n    }\n  }\n\n  if (isGameOver) {\n    return true;\n  }\n  showMessage('message-lose');\n}\n\nfunction showMessage(className) {\n  const messageElement = document.querySelector(`.message.${className}`);\n\n  messageElement.classList.remove('hidden');\n}\n\nfunction checkWin() {\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (gameBoard[row][col] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveLeft() {\n  hasChanged = false;\n\n  const mergedCells = [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 1; col < 4; col++) {\n      if (gameBoard[row][col] !== 0) {\n        let newCol = col;\n\n        while (newCol > 0 && gameBoard[row][newCol - 1] === 0) {\n          newCol--;\n        }\n\n        if (newCol === 0\n           || gameBoard[row][newCol - 1] !== gameBoard[row][col]) {\n          if (newCol !== col) {\n            gameBoard[row][newCol] = gameBoard[row][col];\n            gameBoard[row][col] = 0;\n            hasChanged = true;\n          }\n        } else if (gameBoard[row][newCol - 1] === gameBoard[row][col]) {\n          if (!mergedCells\n            .includes(document.getElementById(`cell-${row}-${newCol - 1}`))) {\n            gameBoard[row][newCol - 1] *= 2;\n            gameBoard[row][col] = 0;\n            score += gameBoard[row][newCol - 1];\n            hasChanged = true;\n\n            mergedCells\n              .push(document.getElementById(`cell-${row}-${newCol - 1}`));\n          }\n        }\n      }\n    }\n  }\n  animateMergedCells(mergedCells);\n  mergedCells.length = 0;\n\n  return hasChanged;\n}\n\nfunction moveRight() {\n  hasChanged = false;\n\n  const mergedCells = [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 2; col >= 0; col--) {\n      if (gameBoard[row][col] !== 0) {\n        let newCol = col;\n\n        while (newCol < 3 && gameBoard[row][newCol + 1] === 0) {\n          newCol++;\n        }\n\n        if (newCol < 3 && gameBoard[row][newCol + 1]\n           === gameBoard[row][col]) {\n          gameBoard[row][newCol + 1] *= 2;\n          gameBoard[row][col] = 0;\n          score += gameBoard[row][newCol + 1];\n          hasChanged = true;\n\n          mergedCells\n            .push(document.getElementById(`cell-${row}-${newCol + 1}`));\n        } else if (newCol !== col) {\n          gameBoard[row][newCol] = gameBoard[row][col];\n          gameBoard[row][col] = 0;\n          hasChanged = true;\n        }\n      }\n    }\n  }\n  animateMergedCells(mergedCells);\n  mergedCells.length = 0;\n\n  return hasChanged;\n}\n\nfunction moveUp() {\n  hasChanged = false;\n\n  const mergedCells = [];\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 1; row < 4; row++) {\n      if (gameBoard[row][col] !== 0) {\n        let newRow = row;\n\n        while (newRow > 0 && gameBoard[newRow - 1][col] === 0) {\n          newRow--;\n        }\n\n        if (newRow > 0 && gameBoard[newRow - 1][col]\n           === gameBoard[row][col]) {\n          gameBoard[newRow - 1][col] *= 2;\n          gameBoard[row][col] = 0;\n          score += gameBoard[newRow - 1][col];\n          hasChanged = true;\n\n          mergedCells\n            .push(document.getElementById(`cell-${newRow - 1}-${col}`));\n        } else if (newRow !== row) {\n          gameBoard[newRow][col] = gameBoard[row][col];\n          gameBoard[row][col] = 0;\n          hasChanged = true;\n        }\n      }\n    }\n  }\n  animateMergedCells(mergedCells);\n  mergedCells.length = 0;\n\n  return hasChanged;\n}\n\nfunction moveDown() {\n  hasChanged = false;\n\n  const mergedCells = [];\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 2; row >= 0; row--) {\n      if (gameBoard[row][col] !== 0) {\n        let newRow = row;\n\n        while (newRow < 3 && gameBoard[newRow + 1][col] === 0) {\n          newRow++;\n        }\n\n        if (newRow < 3 && gameBoard[newRow + 1][col]\n           === gameBoard[row][col]) {\n          gameBoard[newRow + 1][col] *= 2;\n          gameBoard[row][col] = 0;\n          score += gameBoard[newRow + 1][col];\n          hasChanged = true;\n\n          mergedCells\n            .push(document.getElementById(`cell-${newRow + 1}-${col}`));\n        } else if (newRow !== row) {\n          gameBoard[newRow][col] = gameBoard[row][col];\n          gameBoard[row][col] = 0;\n          hasChanged = true;\n        }\n      }\n    }\n  }\n  animateMergedCells(mergedCells);\n  mergedCells.length = 0;\n\n  return hasChanged;\n}\n\nfunction handleKeyDown(keyEvent) {\n  hasChanged = false;\n\n  const {\n    key,\n  } = keyEvent;\n\n  switch (key) {\n    case 'ArrowLeft':\n      hasChanged = moveLeft();\n      break;\n\n    case 'ArrowRight':\n      hasChanged = moveRight();\n      break;\n\n    case 'ArrowUp':\n      hasChanged = moveUp();\n      break;\n\n    case 'ArrowDown':\n      hasChanged = moveDown();\n      break;\n  }\n\n  if (hasChanged && !isGameOver) {\n    addRandomTile();\n    updateBoardView();\n    scoreDisplay.textContent = score;\n\n    if (checkGameOver()) {\n      isGameOver = true;\n      loseMessage.classList.remove('hidden');\n\n      if (checkWin()) {\n        isGameOver = true;\n        winMessage.classList.remove('hidden');\n      }\n    }\n  }\n}\n\nfunction updateBoardView() {\n  hasChanged = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = cells[row * 4 + col];\n      const value = gameBoard[row][col];\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.className = `field-cell value-${value}`;\n      } else {\n        cell.textContent = '';\n        cell.className = 'field-cell';\n      }\n    }\n  }\n\n  if (checkGameOver()) {\n    isGameOver = true;\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nlet isFirstClick = true;\n\nfunction startGame() {\n  if (isFirstClick) {\n    document.getElementById('startButton').textContent\n    = 'Restart';\n    startButton.classList.add('restart');\n    isFirstClick = false;\n  }\n  initializeGame();\n  addRandomTile();\n  addRandomTile();\n  scoreDisplay.textContent = score;\n  startMessage.classList.add('hidden');\n  document.addEventListener('keydown', handleKeyDown);\n  updateBoardView();\n}\n\nstartButton.addEventListener('click', startGame);\n"],"names":["cells","document","querySelectorAll","scoreDisplay","querySelector","startButton","loseMessage","winMessage","startMessage","hasChanged","isGameOver","score","gameBoard","animateMergedCells","mergedCells","forEach","cell","style","transform","setTimeout","addRandomTile","emptyCells","row","col","push","length","randomCell","Math","floor","random","checkGameOver","row1","col1","showMessage","className","messageElement","concat","classList","remove","handleKeyDown","keyEvent","key","moveLeft","newCol","includes","getElementById","moveRight","moveUp","newRow","moveDown","updateBoardView","textContent","checkWin","value","isFirstClick","addEventListener","add","Array","from"],"version":3,"file":"index.4db03ab1.js.map"}